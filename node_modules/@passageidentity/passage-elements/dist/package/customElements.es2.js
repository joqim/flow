var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { r as ref, n as readonly, p as reactive, q as computed, w as watch, d as defineComponent, I as InlineSvg, t as _sfc_main$k, x as useLocale, c as useAppId, y as useAddDevice, z as Icons, _ as _export_sfc, e as resolveComponent, f as createElementBlock, h as createBaseVNode, A as toDisplayString, B as normalizeClass, i as createBlock, C as withModifiers, D as createCommentVNode, F as Fragment, k as openBlock, Q as Qe, M, E as onMounted, g as withDirectives, v as vShow, G as normalizeStyle, H as createVNode, J as bt, K as isStringNullish, L as vt, S as St, N as intlTelInput, O as createTextVNode, P as vModelText, R as renderSlot, U as UserMetadata, T as LayoutType, V as transformMetadata, W as _, X as withCtx, Y as onBeforeMount, Z as computed$1, $ as unref, a0 as useAppInfo, a1 as isRef, j as useDefaultCountryCode, a2 as normalizeProps, a3 as guardReactiveProps, a4 as resolveDynamicComponent } from "./customElements.es.js";
var OnEventType = /* @__PURE__ */ ((OnEventType2) => {
  OnEventType2["onLoaded"] = "onLoaded";
  OnEventType2["onRegisterDevice"] = "onRegisterDevice";
  OnEventType2["onVerifyIdentity"] = "onVerifyIdentity";
  OnEventType2["onMagicLinkLogin"] = "onMagicLinkLogin";
  OnEventType2["onMagicLinkRegister"] = "onMagicLinkRegister";
  OnEventType2["onMagicLinkActivated"] = "onMagicLinkActivated";
  OnEventType2["onMagicLinkActivateSuccess"] = "onMagicLinkActivateSuccess";
  return OnEventType2;
})(OnEventType || {});
const defaultBeforeAuth = () => {
  return true;
};
const defaultOnSuccess = (authResult2) => {
  window.location.href = authResult2.redirect_url;
};
const defaultOnEvent = () => {
  return;
};
const beforeAuth = ref(defaultBeforeAuth);
const onSuccess = ref(defaultOnSuccess);
const onEvent = ref(defaultOnEvent);
function setBeforeAuth(newBeforeAuth) {
  if (newBeforeAuth === void 0) {
    beforeAuth.value = defaultBeforeAuth;
    return;
  }
  beforeAuth.value = newBeforeAuth;
}
function setOnSuccess(newOnSuccess) {
  if (newOnSuccess === void 0) {
    onSuccess.value = defaultOnSuccess;
    return;
  }
  onSuccess.value = newOnSuccess;
}
function setOnEvent(newOnEvent) {
  if (newOnEvent === void 0) {
    onEvent.value = defaultOnEvent;
    return;
  }
  onEvent.value = newOnEvent;
}
function useCallbacks() {
  return {
    beforeAuth: readonly(beforeAuth),
    onSuccess: readonly(onSuccess),
    onEvent: readonly(onEvent),
    setBeforeAuth,
    setOnSuccess,
    setOnEvent
  };
}
const AuthRoute = {
  component: "auth-view"
};
const LoginRoute = {
  component: "login-view"
};
const RegisterRoute = {
  component: "register-view"
};
const RegisterDeviceRoute = {
  component: "register-device-view"
};
const MagicLinkRoute = {
  component: "magic-link-view"
};
const WebauthnSignInRoute = {
  component: "webauthn-sign-in-view"
};
const ActivateMagicLinkRoute = {
  component: "activate-magic-link-view"
};
class Router {
  constructor() {
    this._history = [];
    this._homeRoute = AuthRoute;
    this._history.push(this._homeRoute);
  }
  get homeRoute() {
    return this._homeRoute;
  }
  set homeRoute(homeRoute) {
    this._homeRoute = homeRoute;
    this._history[0] = homeRoute;
  }
  get currentRoute() {
    return this._history[this._history.length - 1];
  }
  push(route, props) {
    this._history.push(__spreadProps(__spreadValues({}, route), { props }));
  }
  resetRouter() {
    this._history = [];
    this._homeRoute = AuthRoute;
    this._history.push(this._homeRoute);
  }
}
const router = reactive(new Router());
const currentRoute = computed(() => router.currentRoute);
function useRouter() {
  return {
    router,
    currentRoute
  };
}
function useAutofocusButton() {
  const autofocusButton = ref();
  function autofocus() {
    if (autofocusButton.value === void 0) {
      return;
    }
    autofocusButton.value.focus();
  }
  watch(autofocusButton, () => {
    autofocus();
  });
  return {
    autofocusButton
  };
}
const _sfc_main$j = defineComponent({
  name: "AddDevice",
  components: {
    InlineSvg,
    PlatformIcon: _sfc_main$k
  },
  props: {
    authResult: {
      type: Object,
      required: false
    }
  },
  setup(props) {
    const { t } = useLocale();
    const { appId } = useAppId();
    const showFailure = ref(false);
    const showSuccess = ref(false);
    const newDevice = ref();
    const { addDevice, addPending, errorMessage } = useAddDevice(appId.value);
    const { autofocusButton } = useAutofocusButton();
    const title = computed(() => {
      if (showFailure.value) {
        return t("something-went-wrong");
      } else {
        return t("success");
      }
    });
    function onButtonClick() {
      return __async(this, null, function* () {
        var _a, _b;
        newDevice.value = yield addDevice();
        if ((_a = newDevice.value) == null ? void 0 : _a.id) {
          showSuccess.value = true;
          showFailure.value = false;
          if ((_b = props.authResult) == null ? void 0 : _b.redirect_url) {
            useCallbacks().onSuccess.value(props.authResult);
          }
        } else {
          showFailure.value = true;
          showSuccess.value = false;
        }
      });
    }
    const onSkipButtonClick = () => {
      var _a;
      if ((_a = props.authResult) == null ? void 0 : _a.redirect_url) {
        useCallbacks().onSuccess.value(props.authResult);
      }
    };
    return {
      showSuccess,
      showFailure,
      title,
      addPending,
      errorMessage,
      newDevice,
      onButtonClick,
      onSkipButtonClick,
      Icons,
      t,
      autofocusButton
    };
  }
});
const _hoisted_1$g = { class: "image has-text-centered" };
const _hoisted_2$c = {
  class: "content has-text-centered",
  "data-test": "activate-magic-link-message"
};
const _hoisted_3$8 = { key: 0 };
const _hoisted_4$8 = { key: 1 };
const _hoisted_5$8 = { style: { "margin-bottom": "10px" } };
const _hoisted_6$7 = { style: { "margin-bottom": "10px" } };
const _hoisted_7$6 = { style: { "margin-bottom": "10px" } };
const _hoisted_8$6 = {
  class: "flex-row flex-center",
  style: { "padding": "20px 0px" }
};
const _hoisted_9$5 = ["disabled"];
const _hoisted_10$4 = { key: 0 };
const _hoisted_11$4 = { key: 1 };
const _hoisted_12$3 = {
  key: 0,
  class: "link has-text-centered"
};
function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  const _component_platform_icon = resolveComponent("platform-icon");
  return openBlock(), createElementBlock(Fragment, null, [
    createBaseVNode("div", {
      class: normalizeClass(["title has-text-centered", [_ctx.showFailure ? "secondary-title" : "main-title"]])
    }, toDisplayString(_ctx.title), 3),
    createBaseVNode("figure", _hoisted_1$g, [
      _ctx.showFailure ? (openBlock(), createBlock(_component_inline_svg, {
        key: 0,
        src: _ctx.Icons.fingerprintFailed,
        alt: "Device failure"
      }, null, 8, ["src"])) : (openBlock(), createBlock(_component_platform_icon, { key: 1 }))
    ]),
    createBaseVNode("div", _hoisted_2$c, [
      _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_3$8, toDisplayString(_ctx.t("failed-to-add-this-device")), 1)) : (openBlock(), createElementBlock("div", _hoisted_4$8, [
        createBaseVNode("div", _hoisted_5$8, [
          createBaseVNode("strong", null, toDisplayString(_ctx.t("save-device")), 1)
        ]),
        createBaseVNode("div", _hoisted_6$7, toDisplayString(_ctx.t("trust-device")), 1),
        createBaseVNode("div", _hoisted_7$6, toDisplayString(_ctx.t("does-not-give-app-personal-info")), 1)
      ]))
    ]),
    createBaseVNode("div", _hoisted_8$6, [
      createBaseVNode("button", {
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.onButtonClick && _ctx.onButtonClick(...args), ["prevent"])),
        type: "button",
        class: normalizeClass(["button is-primary", { "is-loading": _ctx.addPending }]),
        part: "button",
        disabled: _ctx.addPending,
        "data-test": "save-device-button",
        ref: "autofocusButton"
      }, [
        _ctx.showFailure ? (openBlock(), createElementBlock("span", _hoisted_10$4, toDisplayString(_ctx.t("try-again")), 1)) : (openBlock(), createElementBlock("span", _hoisted_11$4, toDisplayString(_ctx.t("continue")), 1))
      ], 10, _hoisted_9$5)
    ]),
    !_ctx.showSuccess ? (openBlock(), createElementBlock("div", _hoisted_12$3, [
      createBaseVNode("div", null, [
        createBaseVNode("a", {
          onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.onSkipButtonClick && _ctx.onSkipButtonClick(...args), ["prevent"])),
          role: "button",
          "data-test": "add-device-skip"
        }, toDisplayString(_ctx.t("skip")), 1)
      ])
    ])) : createCommentVNode("", true)
  ], 64);
}
var AddDevice = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$e]]);
function useUIState() {
  const showFailure = ref(false);
  const showSuccess = ref(false);
  const loading = ref(false);
  const pageLoading = ref(true);
  const showAddDevice = ref(false);
  const { t } = useLocale();
  const title = computed(() => {
    if (showSuccess.value) {
      return t("success");
    }
    if (showFailure.value) {
      return t("something-went-wrong");
    }
    return t("verify-your-identity");
  });
  const uiSuccess = ({ addDevice = false }) => {
    showSuccess.value = true;
    showFailure.value = false;
    showAddDevice.value = addDevice;
    loading.value = false;
  };
  const uiError = () => {
    showSuccess.value = false;
    showFailure.value = true;
    showAddDevice.value = false;
    loading.value = false;
  };
  const uiLoading = ({ addDevice = false }) => {
    showSuccess.value = false;
    showFailure.value = false;
    showAddDevice.value = addDevice;
    loading.value = true;
  };
  return {
    showFailure,
    showSuccess,
    loading,
    pageLoading,
    showAddDevice,
    title,
    uiSuccess,
    uiError,
    uiLoading
  };
}
function checkUserGestureRequired() {
  return typeof window.webkitConvertPointFromNodeToPage === "function";
}
function useWebauthnUtils(passage) {
  const deviceRecognized = ref(false);
  const webauthnAllowed = ref(false);
  const userGestureRequired = checkUserGestureRequired();
  const verifyWebAuthnAllowed = () => __async(this, null, function* () {
    const appInfo = yield passage.appInfo();
    if (passage.checkWebauthnConfig(appInfo)) {
      webauthnAllowed.value = yield passage.isWebauthnSupported(false);
    } else {
      webauthnAllowed.value = false;
    }
    return webauthnAllowed.value;
  });
  const isDeviceRecognized = (magicLink) => {
    const userID = magicLink.split(".")[2];
    deviceRecognized.value = webauthnAllowed.value && passage.credIDExists(userID) ? true : false;
    return deviceRecognized.value;
  };
  const checkWebauthnAndDeviceRecognized = (magicLink) => __async(this, null, function* () {
    yield verifyWebAuthnAllowed();
    isDeviceRecognized(magicLink);
  });
  return {
    deviceRecognized,
    webauthnAllowed,
    userGestureRequired,
    checkWebauthnAndDeviceRecognized,
    verifyWebAuthnAllowed,
    isDeviceRecognized
  };
}
var MagicLinkActionEnum = /* @__PURE__ */ ((MagicLinkActionEnum2) => {
  MagicLinkActionEnum2["LOGIN"] = "psg_magic_link";
  MagicLinkActionEnum2["VERIFY"] = "psg_verify_link";
  return MagicLinkActionEnum2;
})(MagicLinkActionEnum || {});
const useMagicLinkUtils = (magicLink) => {
  const magicLinkAction = ref();
  const invalidMagicLink = ref(false);
  const isMagicLinkValid = () => {
    const searchParams = new URLSearchParams(window.location.href.split("?")[1]);
    if (searchParams.has("psg_magic_link")) {
      magicLinkAction.value = "psg_magic_link";
    } else if (searchParams.has("psg_verify_link")) {
      magicLinkAction.value = "psg_verify_link";
    }
    if (!magicLinkAction.value || !magicLink) {
      invalidMagicLink.value = true;
    }
    return !invalidMagicLink.value;
  };
  return {
    magicLinkAction,
    invalidMagicLink,
    isMagicLinkValid
  };
};
const storageKey = "psg_last_login";
function getLastLogin() {
  return localStorage.getItem(storageKey);
}
function storeLastLogin(identiferOrUserInfo) {
  return __async(this, null, function* () {
    if (identiferOrUserInfo && typeof identiferOrUserInfo === "string") {
      localStorage.setItem(storageKey, identiferOrUserInfo);
      return;
    }
    let currentInfo = identiferOrUserInfo;
    if (identiferOrUserInfo === void 0) {
      const { appId } = useAppId();
      const passage = new Qe(appId.value);
      currentInfo = yield passage.getCurrentUser().userInfo();
    }
    if (currentInfo === void 0) {
      return;
    }
    localStorage.setItem(storageKey, currentInfo.email ? currentInfo.email : currentInfo.phone);
  });
}
const useMagicLinkActivation = ({
  magicLink,
  uiState,
  magicLinkUtils,
  passage,
  webauthnUtils
}) => {
  const authResult2 = ref(null);
  const onBeforeActivate = () => {
    uiState.uiLoading({ addDevice: false });
    authResult2.value = { auth_token: "", redirect_url: "" };
  };
  const onActivateError = () => {
    uiState.uiError();
  };
  const onActivateErrorInvalidMagicLink = () => {
    magicLinkUtils.invalidMagicLink.value = true;
    uiState.uiError();
  };
  const onActivateSuccess = (_0) => __async(void 0, [_0], function* ({ addDevice = false, result }) {
    authResult2.value = result;
    const userInfo = yield passage.getCurrentUser().userInfo();
    storeLastLogin(userInfo);
    uiState.uiSuccess({ addDevice });
    yield new Promise((resolve) => {
      setTimeout(resolve, 1e3);
    });
    if (authResult2.value.redirect_url && !uiState.showAddDevice.value) {
      useCallbacks().onSuccess.value(authResult2.value);
    }
  });
  const activateWithoutBiometrics = () => __async(void 0, null, function* () {
    onBeforeActivate();
    try {
      const result = yield passage.magicLinkActivate(magicLink);
      onActivateSuccess({ addDevice: webauthnUtils.webauthnAllowed.value, result });
    } catch (err) {
      if (err.statusCode === M.NotFound) {
        onActivateErrorInvalidMagicLink();
      } else {
        onActivateError();
      }
    }
  });
  const activateWithBiometrics = () => __async(void 0, null, function* () {
    onBeforeActivate();
    try {
      const result = yield passage.magicLinkActivateWebAuthnLogin(magicLink);
      onActivateSuccess({ addDevice: false, result });
    } catch (err) {
      const error = err;
      if (error.statusCode === M.NotFound) {
        onActivateErrorInvalidMagicLink();
      } else if (error.statusCode === M.PSGCredObjectDoesNotExist || error.statusCode === M.Unauthorized) {
        activateWithoutBiometrics();
      } else {
        onActivateError();
      }
    }
  });
  return {
    authResult: authResult2,
    onBeforeActivate,
    onActivateError,
    onActivateErrorInvalidMagicLink,
    onActivateSuccess,
    activateWithoutBiometrics,
    activateWithBiometrics
  };
};
const _sfc_main$i = defineComponent({
  name: "ActivateMagicLink",
  props: {
    magicLink: {
      type: String,
      required: true
    }
  },
  components: {
    AddDevice,
    InlineSvg,
    PlatformIcon: _sfc_main$k
  },
  setup(props) {
    const { t } = useLocale();
    const { appId } = useAppId();
    const passage = new Qe(appId.value);
    const uiState = useUIState();
    const webauthnUtils = useWebauthnUtils(passage);
    const magicLinkUtils = useMagicLinkUtils(props.magicLink);
    const activation = useMagicLinkActivation({
      uiState,
      webauthnUtils,
      magicLinkUtils,
      passage,
      magicLink: props.magicLink
    });
    function onButtonClick() {
      if (magicLinkUtils.invalidMagicLink.value) {
        window.location.href = window.location.href.split("?")[0];
      } else {
        if (webauthnUtils.deviceRecognized.value) {
          activation.activateWithBiometrics();
        } else {
          activation.activateWithoutBiometrics();
        }
      }
    }
    function redirectNow() {
      var _a;
      if ((_a = activation.authResult.value) == null ? void 0 : _a.redirect_url) {
        useCallbacks().onSuccess.value(activation.authResult.value);
      }
    }
    onMounted(() => __async(this, null, function* () {
      if (magicLinkUtils.isMagicLinkValid()) {
        yield webauthnUtils.checkWebauthnAndDeviceRecognized(props.magicLink);
        const shouldAutoActivate = !webauthnUtils.deviceRecognized.value || !webauthnUtils.webauthnAllowed.value || !webauthnUtils.userGestureRequired && webauthnUtils.deviceRecognized.value;
        const shouldAutoActivateWithBio = !webauthnUtils.userGestureRequired && webauthnUtils.deviceRecognized.value;
        if (shouldAutoActivate) {
          shouldAutoActivateWithBio ? activation.activateWithBiometrics() : activation.activateWithoutBiometrics();
        }
        useCallbacks().onEvent.value(OnEventType.onMagicLinkActivateSuccess);
      } else {
        uiState.uiError();
      }
      uiState.pageLoading.value = false;
    }));
    return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, uiState), webauthnUtils), magicLinkUtils), {
      activation,
      MagicLinkActionEnum,
      onButtonClick,
      redirectNow,
      Icons,
      t
    });
  }
});
const _hoisted_1$f = { class: "auth-flex-container" };
const _hoisted_2$b = { class: "image has-text-centered" };
const _hoisted_3$7 = {
  class: "content has-text-centered",
  "data-test": "activate-magic-link-message"
};
const _hoisted_4$7 = { key: 0 };
const _hoisted_5$7 = { key: 1 };
const _hoisted_6$6 = { key: 2 };
const _hoisted_7$5 = { key: 3 };
const _hoisted_8$5 = { key: 4 };
const _hoisted_9$4 = { key: 5 };
const _hoisted_10$3 = { key: 6 };
const _hoisted_11$3 = { key: 7 };
const _hoisted_12$2 = { key: 8 };
const _hoisted_13$2 = {
  key: 0,
  class: "flex-row flex-center",
  style: { "padding": "20px 0px" }
};
const _hoisted_14$2 = ["disabled"];
const _hoisted_15$2 = { key: 0 };
const _hoisted_16$2 = { key: 1 };
const _hoisted_17$2 = { key: 2 };
const _hoisted_18$1 = { key: 3 };
function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  const _component_platform_icon = resolveComponent("platform-icon");
  const _component_AddDevice = resolveComponent("AddDevice");
  return openBlock(), createElementBlock(Fragment, null, [
    withDirectives(createBaseVNode("div", _hoisted_1$f, [
      createBaseVNode("div", {
        class: normalizeClass(["title has-text-centered", [_ctx.showSuccess ? "main-title" : "secondary-title"]])
      }, toDisplayString(_ctx.showFailure ? _ctx.invalidMagicLink ? _ctx.t("invalid-link") : _ctx.t("device-login-failed-title") : _ctx.title), 3),
      createBaseVNode("figure", _hoisted_2$b, [
        _ctx.showSuccess && _ctx.webauthnAllowed ? (openBlock(), createBlock(_component_inline_svg, {
          key: 0,
          src: _ctx.Icons.fingerprintSuccess,
          alt: "Device success"
        }, null, 8, ["src"])) : _ctx.showSuccess && !_ctx.webauthnAllowed ? (openBlock(), createBlock(_component_inline_svg, {
          key: 1,
          src: _ctx.Icons.emailSuccess,
          alt: "Magic link success"
        }, null, 8, ["src"])) : _ctx.showFailure && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.VERIFY ? (openBlock(), createBlock(_component_inline_svg, {
          key: 2,
          src: _ctx.Icons.emailFailed,
          alt: "Magic link failure"
        }, null, 8, ["src"])) : _ctx.showFailure && _ctx.invalidMagicLink ? (openBlock(), createBlock(_component_inline_svg, {
          key: 3,
          src: _ctx.Icons.emailFailed,
          alt: "Magic link failure"
        }, null, 8, ["src"])) : _ctx.showFailure && _ctx.webauthnAllowed ? (openBlock(), createBlock(_component_inline_svg, {
          key: 4,
          src: _ctx.Icons.fingerprintFailed,
          alt: "Device failure"
        }, null, 8, ["src"])) : _ctx.webauthnAllowed ? (openBlock(), createBlock(_component_platform_icon, { key: 5 })) : createCommentVNode("", true)
      ]),
      createBaseVNode("div", _hoisted_3$7, [
        _ctx.showSuccess && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.LOGIN ? (openBlock(), createElementBlock("div", _hoisted_4$7, toDisplayString(_ctx.t("successfully-logged-in-redirect")), 1)) : _ctx.showSuccess && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.VERIFY ? (openBlock(), createElementBlock("div", _hoisted_5$7, toDisplayString(_ctx.t("successfully-changed-email")), 1)) : _ctx.showFailure && _ctx.invalidMagicLink && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.VERIFY ? (openBlock(), createElementBlock("div", _hoisted_6$6, toDisplayString(_ctx.t("link-invalid")), 1)) : _ctx.showFailure && _ctx.invalidMagicLink ? (openBlock(), createElementBlock("div", _hoisted_7$5, toDisplayString(_ctx.t("login-link-invalid")), 1)) : _ctx.showFailure && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.VERIFY ? (openBlock(), createElementBlock("div", _hoisted_8$5, toDisplayString(_ctx.t("verification-failed-please-try-again")), 1)) : _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_9$4, toDisplayString(_ctx.t("device-login-failed")), 1)) : _ctx.webauthnAllowed && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.LOGIN ? (openBlock(), createElementBlock("div", _hoisted_10$3, toDisplayString(_ctx.t("log-in-to-proceed")), 1)) : _ctx.webauthnAllowed && _ctx.magicLinkAction === _ctx.MagicLinkActionEnum.VERIFY ? (openBlock(), createElementBlock("div", _hoisted_11$3, toDisplayString(_ctx.t("verify-your-identity-with-device")), 1)) : _ctx.webauthnAllowed ? (openBlock(), createElementBlock("div", _hoisted_12$2, toDisplayString(_ctx.t("log-into-your-account-extended")), 1)) : createCommentVNode("", true)
      ]),
      _ctx.userGestureRequired || _ctx.showFailure || _ctx.showSuccess ? (openBlock(), createElementBlock("div", _hoisted_13$2, [
        createBaseVNode("button", {
          onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.onButtonClick && _ctx.onButtonClick(...args), ["prevent"])),
          type: "button",
          class: normalizeClass(["button is-primary", { "is-loading": _ctx.loading, "small": _ctx.showFailure && _ctx.invalidMagicLink }]),
          part: "button",
          disabled: _ctx.loading,
          "data-test": "activate-magic-link-button"
        }, [
          _ctx.showFailure && _ctx.invalidMagicLink ? (openBlock(), createElementBlock("span", _hoisted_15$2, toDisplayString(_ctx.t("request-new-link")), 1)) : _ctx.showFailure ? (openBlock(), createElementBlock("span", _hoisted_16$2, toDisplayString(_ctx.t("try-again")), 1)) : _ctx.showSuccess ? (openBlock(), createElementBlock("span", _hoisted_17$2, toDisplayString(_ctx.t("redirect-now")), 1)) : (openBlock(), createElementBlock("span", _hoisted_18$1, toDisplayString(_ctx.t("login-with-device")), 1))
        ], 10, _hoisted_14$2)
      ])) : createCommentVNode("", true)
    ], 512), [
      [vShow, !_ctx.pageLoading && !_ctx.showAddDevice]
    ]),
    !_ctx.pageLoading && _ctx.showAddDevice ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "auth-flex-container",
      style: normalizeStyle(_ctx.showFailure ? "justify-content: space-between" : "")
    }, [
      createVNode(_component_AddDevice, {
        "auth-result": _ctx.activation.authResult.value
      }, null, 8, ["auth-result"])
    ], 4)) : createCommentVNode("", true)
  ], 64);
}
var ActivateMagicLink = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$d]]);
const _sfc_main$h = defineComponent({
  name: "ActivateMagicLinkView",
  props: {
    magicLink: {
      type: String,
      required: true
    }
  },
  components: {
    ActivateMagicLink
  }
});
const _hoisted_1$e = { class: "view-verify-token" };
function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_activate_magic_link = resolveComponent("activate-magic-link");
  return openBlock(), createElementBlock("div", _hoisted_1$e, [
    createVNode(_component_activate_magic_link, { magicLink: _ctx.magicLink }, null, 8, ["magicLink"])
  ]);
}
var ActivateMagicLinkView = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$c]]);
function useMagicLink() {
  const { router: router2 } = useRouter();
  onMounted(() => {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let magicLink = null;
    if (urlParams.has("psg_magic_link")) {
      magicLink = urlParams.get("psg_magic_link");
    } else if (urlParams.has("psg_verify_link")) {
      magicLink = urlParams.get("psg_verify_link");
    }
    if (magicLink !== null) {
      router2.push(ActivateMagicLinkRoute, { magicLink });
    }
  });
}
var IdentifierType = /* @__PURE__ */ ((IdentifierType2) => {
  IdentifierType2["phone"] = "PHONE";
  IdentifierType2["email"] = "EMAIL";
  return IdentifierType2;
})(IdentifierType || {});
const _sfc_main$g = defineComponent({
  name: "ValidatedIdentiferForm",
  emits: ["onSubmit", "update:validationError", "update:identifier", "update:countryCode", "update:showWelcomeBack"],
  props: {
    appId: {
      type: String,
      required: true
    },
    validationError: {
      type: String,
      default: ""
    },
    identifier: {
      type: String,
      required: true
    },
    countryCode: {
      type: String,
      required: true
    },
    identifierMode: {
      type: String,
      required: true
    },
    showWelcomeBack: {
      type: Boolean,
      default: false
    }
  },
  setup(props, context) {
    const { t } = useLocale();
    const identifierParseError = ref("");
    const identifierInput = ref();
    const controlContainer = ref();
    const { autofocusButton } = useAutofocusButton();
    const showWelcomeUI = computed(() => {
      return props.showWelcomeBack;
    });
    const label = computed(() => {
      let identifierType;
      switch (props.identifierMode) {
        case bt.phone:
          identifierType = t("phone-number");
          break;
        case bt.email:
          identifierType = t("email-address");
          break;
        case bt.both:
          identifierType = t("email-or-phone-number");
          break;
      }
      return identifierType.charAt(0).toUpperCase() + identifierType.slice(1);
    });
    const placeholder = computed(() => {
      return "example@email.com";
    });
    const inputMode = computed(() => {
      if (props.identifierMode === bt.phone) {
        return "tel";
      }
      return "email";
    });
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        context.emit("update:identifier", newIdentifier);
      }
    });
    function formattedIdentifier() {
      var _a;
      if (!identifierText.value) {
        return "";
      }
      let identifier = identifierText.value;
      if (!showWelcomeUI.value) {
        identifier = isPhoneNumber() ? (_a = phoneInput == null ? void 0 : phoneInput.getNumber()) != null ? _a : "" : identifierText.value;
      }
      return identifier.trim().toLowerCase();
    }
    const error = computed(() => {
      if (!isStringNullish(props.validationError)) {
        return props.validationError;
      }
      if (!isStringNullish(identifierParseError.value)) {
        return identifierParseError.value;
      }
      return "";
    });
    function clearErrors() {
      identifierParseError.value = "";
      context.emit("update:validationError", "");
    }
    function checkIdentifier() {
      return __async(this, null, function* () {
        if (!validateInput()) {
          return;
        }
        const passage = new Qe(props.appId);
        let identifierExists, userHasWebauthn, userHasPasskey, emailVerified, phoneVerified = false;
        let userStatus;
        let userID = "";
        try {
          const userInfo = yield passage.identifierExists(formattedIdentifier());
          if (userInfo !== null) {
            identifierExists = true;
            userHasWebauthn = userInfo.webauthn;
            userStatus = userInfo.status;
            userID = userInfo.id;
            emailVerified = userInfo.email_verified;
            phoneVerified = userInfo.phone_verified;
            userHasPasskey = userInfo.webauthn_types.includes(vt.Passkey);
          } else {
            identifierExists = false;
            userHasWebauthn = false;
            userStatus = St.INACTIVE;
          }
        } catch (e) {
          let errorMessage;
          switch (props.identifierMode) {
            case bt.email:
              errorMessage = t("enter-a-valid-email-address");
              break;
            case bt.phone:
              errorMessage = t("enter-a-valid-phone-number");
              break;
            case bt.both:
              errorMessage = t("enter-a-valid-email-or-phone-number");
              break;
          }
          identifierParseError.value = errorMessage;
          return;
        }
        context.emit("onSubmit", {
          identifier: formattedIdentifier(),
          identifierExists,
          identifierType: isPhoneNumber() ? IdentifierType.phone : IdentifierType.email,
          userHasWebauthn,
          userStatus,
          userID,
          emailVerified,
          phoneVerified,
          userHasPasskey
        });
      });
    }
    function isEmail() {
      const emailRegEx = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return emailRegEx.test(formattedIdentifier());
    }
    function isPhoneNumber() {
      if (showWelcomeUI.value) {
        return isPhoneNumberRegex();
      }
      if (phoneInput === void 0) {
        return false;
      }
      return phoneInput.isValidNumber();
    }
    function validateInput() {
      if (formattedIdentifier() === "") {
        let message = "";
        switch (props.identifierMode) {
          case bt.phone:
            message = t("enter-a-phone-number");
            break;
          case bt.email:
            message = t("enter-an-email-address");
            break;
          case bt.both:
            message = t("enter-an-email-or-phone-number");
            break;
        }
        identifierParseError.value = message;
        return false;
      } else if (props.identifierMode === bt.email && !isEmail()) {
        identifierParseError.value = t("enter-a-valid-email-address");
        return false;
      } else if (props.identifierMode === bt.phone && !isPhoneNumber()) {
        identifierParseError.value = t("enter-a-valid-phone-number");
        return false;
      } else if (props.identifierMode === bt.both && !isPhoneNumber() && !isEmail()) {
        identifierParseError.value = t("enter-a-valid-email-or-phone-number");
        return false;
      }
      return true;
    }
    let phoneInput;
    function showCountryCode() {
      if (phoneInput !== void 0) {
        return;
      }
      identifierInput.value.addEventListener("countrychange", () => {
        var _a;
        context.emit("update:countryCode", (_a = phoneInput == null ? void 0 : phoneInput.getSelectedCountryData().iso2) != null ? _a : "");
      });
      phoneInput = intlTelInput(identifierInput.value, {
        initialCountry: props.countryCode,
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
        dropdownContainer: controlContainer.value,
        autoPlaceholder: "aggressive"
      });
      identifierInput.value.focus();
    }
    function hideCountryCode() {
      if (phoneInput === void 0) {
        return;
      }
      phoneInput.destroy();
      phoneInput = void 0;
      if (identifierInput.value) {
        identifierInput.value.focus();
      }
    }
    function moveInput() {
      const parent = identifierInput.value.getRootNode().host;
      parent.appendChild(identifierInput.value);
    }
    const labelRef = ref();
    function moveBack() {
      var _a;
      (_a = labelRef.value) == null ? void 0 : _a.append(identifierInput.value);
    }
    onMounted(() => {
      if (props.identifierMode === bt.phone) {
        showCountryCode();
      }
    });
    function isPhoneNumberRegex() {
      const phoneNumberRegex = /^\+$|^\+?[0-9,(,),\-, ]+$/;
      return phoneNumberRegex.test(identifierText.value.trim());
    }
    if (props.identifierMode === bt.both) {
      watch(identifierText, () => {
        if (isPhoneNumberRegex()) {
          showCountryCode();
        } else {
          hideCountryCode();
        }
      });
    }
    const countryCodeText = computed(() => {
      return props.countryCode;
    });
    watch(countryCodeText, (newValue) => {
      phoneInput == null ? void 0 : phoneInput.setCountry(newValue);
    });
    function switchAccount() {
      context.emit("update:showWelcomeBack", false);
      identifierText.value = "";
    }
    return {
      error,
      identifierText,
      checkIdentifier,
      clearErrors,
      identifierInput,
      controlContainer,
      placeholder,
      label,
      inputMode,
      moveInput,
      labelRef,
      moveBack,
      showWelcomeUI,
      switchAccount,
      t,
      autofocusButton
    };
  }
});
const _hoisted_1$d = { class: "has-text-centered" };
const _hoisted_2$a = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_3$6 = ["autocomplete", "inputmode", "placeholder"];
const _hoisted_4$6 = {
  ref: "controlContainer",
  style: { "width": "100%" }
};
const _hoisted_5$6 = { class: "flex-row flex-center" };
const _hoisted_6$5 = {
  key: 0,
  style: { "margin-top": "30px" },
  class: "link has-text-centered"
};
function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("form", {
    onSubmit: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.checkIdentifier && _ctx.checkIdentifier(...args), ["prevent"]))
  }, [
    withDirectives(createBaseVNode("div", _hoisted_1$d, [
      createTextVNode(toDisplayString(_ctx.t("welcome-back-sign-in-as")), 1),
      _hoisted_2$a,
      createBaseVNode("strong", null, toDisplayString(_ctx.identifierText), 1)
    ], 512), [
      [vShow, _ctx.showWelcomeBack]
    ]),
    withDirectives(createBaseVNode("div", null, [
      createBaseVNode("div", {
        class: "label",
        ref: "labelRef"
      }, toDisplayString(_ctx.label), 513),
      withDirectives(createBaseVNode("input", {
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.identifierText = $event),
        type: "text",
        class: normalizeClass(["input", { "is-danger": _ctx.error }]),
        part: "input",
        autocomplete: _ctx.inputMode,
        inputmode: _ctx.inputMode,
        id: "identifier",
        placeholder: _ctx.placeholder,
        onInput: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.clearErrors && _ctx.clearErrors(...args), ["prevent"])),
        ref: "identifierInput",
        "data-test": "identifier-input"
      }, null, 42, _hoisted_3$6), [
        [vModelText, _ctx.identifierText]
      ])
    ], 512), [
      [vShow, !_ctx.showWelcomeBack]
    ]),
    createBaseVNode("div", _hoisted_4$6, null, 512),
    createBaseVNode("div", {
      style: normalizeStyle(`text-align: ${_ctx.showWelcomeUI ? "center" : "left"};`),
      class: "help is-danger error-message",
      "data-test": "validation-error"
    }, toDisplayString(_ctx.error), 5),
    renderSlot(_ctx.$slots, "default"),
    createBaseVNode("div", _hoisted_5$6, [
      createBaseVNode("button", {
        type: "submit",
        class: "button is-primary",
        part: "button",
        "data-test": "continue-button",
        ref: "autofocusButton"
      }, toDisplayString(_ctx.t("continue")), 513)
    ]),
    _ctx.showWelcomeUI ? (openBlock(), createElementBlock("div", _hoisted_6$5, [
      createBaseVNode("a", {
        onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.switchAccount && _ctx.switchAccount(...args), ["prevent"])),
        role: "button",
        "data-test": "register-link"
      }, toDisplayString(_ctx.t("switch-account")), 1)
    ])) : createCommentVNode("", true)
  ], 32);
}
var ValidatedIdentifierForm = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$b]]);
const _sfc_main$f = defineComponent({
  name: "Login",
  components: {
    ValidatedIdentifierForm
  },
  props: {
    canToggleLoginRegister: Boolean,
    identifier: {
      type: String,
      required: true
    },
    countryCode: {
      type: String,
      required: true
    },
    appInfo: {
      type: Object,
      required: true
    },
    webauthnAllowed: {
      type: Boolean,
      required: true
    },
    visible: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:identifier", "update:countryCode"],
  setup(props, context) {
    const { router: router2 } = useRouter();
    const { appId } = useAppId();
    const { t } = useLocale();
    const error = ref("");
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        context.emit("update:identifier", newIdentifier);
      }
    });
    const countryCodeText = computed({
      get() {
        return props.countryCode;
      },
      set(newCountryCode) {
        context.emit("update:countryCode", newCountryCode);
      }
    });
    const passage = new Qe(appId.value);
    const inputForm = ref();
    watch(inputForm, () => __async(this, null, function* () {
      useCallbacks().onEvent.value(OnEventType.onLoaded);
    }));
    const identifierMode = computed(() => {
      var _a;
      return (_a = props.appInfo.allowed_identifier) != null ? _a : bt.email;
    });
    useMagicLink();
    function onSubmit(event) {
      return __async(this, null, function* () {
        const {
          identifier,
          identifierExists,
          userHasWebauthn,
          userHasPasskey,
          userStatus,
          userID,
          identifierType,
          emailVerified,
          phoneVerified
        } = event;
        const beforeAuthResult = useCallbacks().beforeAuth.value(identifier);
        if (!beforeAuthResult) {
          return;
        }
        const errorString = checkIdentifierExistsAndStatus(identifierExists, identifierType, userStatus);
        if (errorString !== "") {
          error.value = errorString;
          return;
        }
        if (userNeedsToVerify(emailVerified, phoneVerified, identifierType)) {
          router2.push(MagicLinkRoute, { identifier, identifierType, identifierVerifying: true });
        } else {
          const browserInfo = yield passage.browserInfo();
          const tryPasskey = userHasPasskey && window.PublicKeyCredential && browserInfo.getPassKeySupported;
          if (tryPasskey) {
            useCallbacks().onEvent.value(OnEventType.onVerifyIdentity);
            router2.push(WebauthnSignInRoute, { identifier, identifierType });
            return;
          }
          if (props.webauthnAllowed) {
            if (userHasWebauthn && passage.credIDExists(userID)) {
              useCallbacks().onEvent.value(OnEventType.onVerifyIdentity);
              router2.push(WebauthnSignInRoute, { identifier, identifierType });
            } else {
              useCallbacks().onEvent.value(OnEventType.onMagicLinkLogin);
              router2.push(MagicLinkRoute, { identifier, identifierType, setupNewDevice: true });
            }
          } else {
            useCallbacks().onEvent.value(OnEventType.onMagicLinkLogin);
            router2.push(MagicLinkRoute, { identifier, identifierType });
          }
        }
      });
    }
    function checkIdentifierExistsAndStatus(identifierExists, identifierType, userStatus) {
      if (!identifierExists) {
        let identiferString = identifierType === IdentifierType.email ? t("email") : t("phone");
        identiferString = identiferString.charAt(0).toUpperCase() + identiferString.slice(1);
        let message = t("not-recognized", [identiferString]);
        if (props.canToggleLoginRegister) {
          message = message + ". " + t("toggle-register");
        }
        return message;
      }
      if (identifierExists && userStatus === St.INACTIVE) {
        return t("account-no-longer-active");
      }
      return "";
    }
    function userNeedsToVerify(emailVerified, phoneVerified, identifierType) {
      if (props.appInfo.require_identifier_verification) {
        if (identifierType === IdentifierType.email && !emailVerified || identifierType === IdentifierType.phone && !phoneVerified) {
          return true;
        }
      }
      return false;
    }
    const showWelcomeBack = ref(false);
    onMounted(() => {
      const lastLogin = getLastLogin();
      if (lastLogin) {
        identifierText.value = lastLogin;
        showWelcomeBack.value = true;
      }
    });
    watch(
      () => props.visible,
      () => {
        if (showWelcomeBack.value === true) {
          identifierText.value = "";
        }
        showWelcomeBack.value = false;
      }
    );
    return {
      appId,
      error,
      identifierText,
      countryCodeText,
      onSubmit,
      identifierMode,
      inputForm,
      showWelcomeBack
    };
  }
});
function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_validated_identifier_form = resolveComponent("validated-identifier-form");
  return openBlock(), createBlock(_component_validated_identifier_form, {
    appId: _ctx.appId,
    identifierMode: _ctx.identifierMode,
    showWelcomeBack: _ctx.showWelcomeBack,
    "onUpdate:showWelcomeBack": _cache[0] || (_cache[0] = ($event) => _ctx.showWelcomeBack = $event),
    identifier: _ctx.identifierText,
    "onUpdate:identifier": _cache[1] || (_cache[1] = ($event) => _ctx.identifierText = $event),
    validationError: _ctx.error,
    "onUpdate:validationError": _cache[2] || (_cache[2] = ($event) => _ctx.error = $event),
    countryCode: _ctx.countryCodeText,
    "onUpdate:countryCode": _cache[3] || (_cache[3] = ($event) => _ctx.countryCodeText = $event),
    onOnSubmit: _cache[4] || (_cache[4] = ($event) => _ctx.onSubmit($event)),
    ref: "inputForm"
  }, null, 8, ["appId", "identifierMode", "showWelcomeBack", "identifier", "validationError", "countryCode"]);
}
var Login = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$a]]);
const _sfc_main$e = defineComponent({
  name: "Register",
  props: {
    canToggleLoginRegister: Boolean,
    identifier: {
      type: String,
      required: true
    },
    countryCode: {
      type: String,
      required: true
    },
    appInfo: {
      type: Object,
      required: true
    },
    webauthnAllowed: {
      type: Boolean,
      required: true
    }
  },
  emits: ["update:identifier", "update:countryCode"],
  components: {
    ValidatedIdentifierForm,
    UserMetadata
  },
  setup(props, context) {
    const { t } = useLocale();
    const { router: router2 } = useRouter();
    const { appId } = useAppId();
    const error = ref("");
    const identifierText = computed({
      get() {
        return props.identifier;
      },
      set(newIdentifier) {
        context.emit("update:identifier", newIdentifier);
      }
    });
    const countryCodeText = computed({
      get() {
        return props.countryCode;
      },
      set(newCountryCode) {
        context.emit("update:countryCode", newCountryCode);
      }
    });
    const publicSignup = computed(() => {
      return props.appInfo.public_signup;
    });
    const identifierMode = computed(() => {
      return props.appInfo.allowed_identifier;
    });
    useMagicLink();
    function onSubmit(event) {
      return __async(this, null, function* () {
        const { identifier, identifierExists, userStatus, identifierType } = event;
        const beforeAuthResult = useCallbacks().beforeAuth.value(identifier);
        if (!beforeAuthResult) {
          return;
        }
        let validMetadata = true;
        if (metadataComponent.value) {
          validMetadata = metadataComponent.value.validate();
        }
        if (identifierExists) {
          if (userStatus === St.ACTIVE) {
            let message = t("account-already-exists", [
              identifierType === IdentifierType.email ? t("email") : t("phone-number")
            ]);
            if (props.canToggleLoginRegister) {
              message = message + t("toggle-login");
            }
            error.value = message;
            return;
          } else if (userStatus === St.INACTIVE) {
            error.value = t("account-no-longer-active");
            return;
          }
        }
        const passage = new Qe(appId.value);
        if (!validMetadata) {
          return;
        }
        try {
          yield passage.createUser({
            identifier,
            user_metadata: transformMetadata(metadata.value, props.appInfo.user_metadata_schema, true)
          });
        } catch (err) {
          if (err instanceof _ && err.message.startsWith("Public signup")) {
            error.value = err.message;
          } else {
            error.value = t("unexpected-error");
          }
          return;
        }
        if (props.appInfo.require_identifier_verification) {
          router2.push(MagicLinkRoute, { identifier, identifierType, userIsRegistering: true, identifierVerifying: true });
        } else {
          if (props.webauthnAllowed) {
            useCallbacks().onEvent.value(OnEventType.onRegisterDevice, { identifier });
            router2.push(RegisterDeviceRoute, { identifier, identifierType });
          } else {
            useCallbacks().onEvent.value(OnEventType.onMagicLinkRegister, { identifier });
            router2.push(MagicLinkRoute, { identifier, identifierType, userIsRegistering: true });
          }
        }
      });
    }
    const metadata = ref({});
    const metadataComponent = ref();
    return {
      appId,
      error,
      identifierText,
      countryCodeText,
      onSubmit,
      identifierMode,
      metadata,
      metadataComponent,
      LayoutType,
      publicSignup,
      t
    };
  }
});
const _hoisted_1$c = {
  key: 0,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_user_metadata = resolveComponent("user-metadata");
  const _component_validated_identifier_form = resolveComponent("validated-identifier-form");
  return openBlock(), createElementBlock("div", null, [
    createVNode(_component_validated_identifier_form, {
      appId: _ctx.appId,
      identifierMode: _ctx.identifierMode,
      identifier: _ctx.identifierText,
      "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => _ctx.identifierText = $event),
      validationError: _ctx.error,
      "onUpdate:validationError": _cache[1] || (_cache[1] = ($event) => _ctx.error = $event),
      countryCode: _ctx.countryCodeText,
      "onUpdate:countryCode": _cache[2] || (_cache[2] = ($event) => _ctx.countryCodeText = $event),
      onOnSubmit: _cache[3] || (_cache[3] = ($event) => _ctx.onSubmit($event))
    }, {
      default: withCtx(() => [
        _ctx.appInfo && _ctx.appInfo.layouts.registration.length > 0 ? (openBlock(), createBlock(_component_user_metadata, {
          key: 0,
          isEditing: true,
          appInfo: _ctx.appInfo,
          layoutType: _ctx.LayoutType.Registration,
          userMetadata: _ctx.metadata,
          ref: "metadataComponent"
        }, null, 8, ["appInfo", "layoutType", "userMetadata"])) : createCommentVNode("", true)
      ]),
      _: 1
    }, 8, ["appId", "identifierMode", "identifier", "validationError", "countryCode"]),
    !_ctx.publicSignup ? (openBlock(), createElementBlock("div", _hoisted_1$c, toDisplayString(_ctx.t("public-registration-not-allowed")), 1)) : createCommentVNode("", true)
  ]);
}
var Register = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$9]]);
const ephemeralAppIdKey = "psg_ephemeral_app_id";
const ephemeralAppNameKey = "psg_ephemeral_app_name";
class EphemeralAppService {
  newEphemeralApp() {
    return __async(this, null, function* () {
      const ephemeralAppUrl = "https://api.passage.id/v1/apps/";
      const response = yield fetch(ephemeralAppUrl, {
        method: "POST",
        body: JSON.stringify({
          auth_origin: window.location.origin,
          name: "Ephemeral Random " + (Math.random() * 1e6).toString()
        })
      });
      const responseBody = yield response.json();
      if (response.status !== 200) {
        throw responseBody.message;
      }
      localStorage.setItem(ephemeralAppIdKey, responseBody.app.id);
      localStorage.setItem(ephemeralAppNameKey, responseBody.app.name);
      return responseBody;
    });
  }
}
const _sfc_main$d = defineComponent({
  name: "EphemeralAppInfo",
  setup() {
    const consoleUrl = "https://console.passage.id";
    const { t } = useLocale();
    const error = ref(false);
    const isEphemeral = ref(false);
    const claimed = ref(false);
    const ephemeralClaimUrl = ref("");
    const exampleTag = ref("");
    const passageWebSetup = () => __async(this, null, function* () {
      const { appIdUnassigned, updateAppId } = useAppId();
      if (appIdUnassigned.value) {
        isEphemeral.value = true;
        const ephemeralAppId = localStorage.getItem(ephemeralAppIdKey);
        const ephemeralAppName = localStorage.getItem(ephemeralAppNameKey);
        if (ephemeralAppId) {
          const nameParam = ephemeralAppName ? `?name=${encodeURIComponent(ephemeralAppName)}` : "";
          ephemeralClaimUrl.value = `${consoleUrl}/claim/${ephemeralAppId}${nameParam}`;
          updateAppId(ephemeralAppId);
          logToConsole();
        } else {
          try {
            const ephemeralService = new EphemeralAppService();
            const res = yield ephemeralService.newEphemeralApp();
            updateAppId(res.app.id);
            const nameParam = res.app.name ? `?name=${encodeURIComponent(res.app.name)}` : "";
            ephemeralClaimUrl.value = `${consoleUrl}/claim/${res.app.id}${nameParam}`;
            logToConsole();
          } catch (err) {
            error.value = true;
            updateAppId("");
          }
        }
      }
    });
    const checkIfClaimed = () => __async(this, null, function* () {
      const { appId } = useAppId();
      if (!isEphemeral.value) {
        return;
      }
      const passage = new Qe(appId.value);
      try {
        const res = yield passage.appInfo();
        if (!res.ephemeral) {
          claimed.value = true;
          exampleTag.value = `<passage-auth app-id="${appId.value}"/>`;
        }
      } catch (e) {
        error.value = true;
      }
    });
    function logToConsole() {
      const { appId } = useAppId();
      console.info(`Passage Test App ID: ${appId.value}`);
      console.info(`Claim your app: ${ephemeralClaimUrl.value}`);
    }
    onBeforeMount(() => __async(this, null, function* () {
      yield passageWebSetup();
      yield checkIfClaimed();
    }));
    return {
      error,
      isEphemeral,
      claimed,
      ephemeralClaimUrl,
      exampleTag,
      t
    };
  }
});
const _hoisted_1$b = { key: 0 };
const _hoisted_2$9 = {
  key: 0,
  class: "notification is-danger"
};
const _hoisted_3$5 = {
  key: 1,
  class: "notification ephemeral-box",
  "data-test": "ephemeral-app-message"
};
const _hoisted_4$5 = { key: 0 };
const _hoisted_5$5 = ["href"];
const _hoisted_6$4 = /* @__PURE__ */ createTextVNode(".");
const _hoisted_7$4 = { key: 1 };
const _hoisted_8$4 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.isEphemeral ? (openBlock(), createElementBlock("div", _hoisted_1$b, [
    _ctx.error ? (openBlock(), createElementBlock("div", _hoisted_2$9, toDisplayString(_ctx.t("unable-to-create-test-app")), 1)) : (openBlock(), createElementBlock("div", _hoisted_3$5, [
      !_ctx.claimed ? (openBlock(), createElementBlock("div", _hoisted_4$5, [
        createTextVNode(toDisplayString(_ctx.t("currently-using-test-app")) + " ", 1),
        createBaseVNode("a", {
          href: _ctx.ephemeralClaimUrl,
          target: "_blank"
        }, toDisplayString(_ctx.t("click-here")), 9, _hoisted_5$5),
        _hoisted_6$4
      ])) : (openBlock(), createElementBlock("div", _hoisted_7$4, [
        createTextVNode(toDisplayString(_ctx.t("add-your-claimed-app-like-this")) + " ", 1),
        _hoisted_8$4,
        createTextVNode(toDisplayString(_ctx.exampleTag), 1)
      ]))
    ]))
  ])) : createCommentVNode("", true);
}
var EphemeralAppInfo = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$8]]);
var TooltipPosition = /* @__PURE__ */ ((TooltipPosition2) => {
  TooltipPosition2["isTop"] = "is-top";
  TooltipPosition2["isBottom"] = "is-bottom";
  TooltipPosition2["isLeft"] = "is-left";
  TooltipPosition2["isRight"] = "is-right";
  return TooltipPosition2;
})(TooltipPosition || {});
const _sfc_main$c = defineComponent({
  name: "Tooltip",
  components: {
    InlineSvg
  },
  props: {
    label: String,
    active: {
      type: Boolean,
      default: true
    },
    sticky: {
      type: Boolean,
      default: false
    },
    position: {
      type: String,
      default: "is-top"
    },
    clickMode: {
      type: Boolean,
      default: false
    },
    title: {
      type: String,
      default: ""
    }
  },
  setup(props) {
    const parentItem = ref();
    const tooltipBody = ref();
    const width = ref(0);
    const maxHeight = ref("");
    const absoluteHeight = ref("");
    const cssVisible = ref(props.sticky);
    const domVisible = ref(props.sticky);
    function calculateTooltipSize() {
      const absoluteMaxWidth = 500;
      if (parentItem.value === void 0 || parentItem.value === null) {
        return;
      }
      const parentItemDiv = parentItem.value;
      const viewport = parentItemDiv.getRootNode().getElementById("passage-auth-container");
      if (viewport === null) {
        return;
      }
      const { left: viewLeft, right: viewRight } = viewport.getBoundingClientRect();
      const { left: itemLeft, right: itemRight, top: itemTop } = parentItemDiv.getBoundingClientRect();
      const itemMidpoint = (itemRight - itemLeft) / 2 + itemLeft;
      const spaceLeft = itemMidpoint - viewLeft - 20;
      const spaceRight = viewRight - itemMidpoint - 20;
      let viewportSafeWidth;
      const viewportSafeHeight = itemTop - 20;
      switch (props.position) {
        case "is-top":
        case "is-bottom":
          viewportSafeWidth = viewRight - viewLeft - 20;
          break;
        case "is-left":
          viewportSafeWidth = spaceLeft;
          break;
        case "is-right":
          viewportSafeWidth = spaceRight;
          break;
      }
      maxHeight.value = `max-height: ${viewportSafeHeight}px;`;
      width.value = Math.min(viewportSafeWidth, absoluteMaxWidth);
    }
    function calculateScrollHeight() {
      var _a;
      const parentItemDiv = parentItem.value;
      const { top: itemTop } = parentItemDiv.getBoundingClientRect();
      const contentHeight = ((_a = tooltipBody.value) == null ? void 0 : _a.scrollHeight) || 0;
      const viewportSafeHeight = itemTop - 20;
      if (contentHeight > viewportSafeHeight) {
        absoluteHeight.value = `height: ${viewportSafeHeight}px;`;
      }
    }
    function show() {
      if (props.sticky) {
        return;
      }
      clearTimeout(hideTimeout);
      clearTimeout(innerTimeout);
      domVisible.value = true;
      calculateTooltipSize();
      setTimeout(() => {
        cssVisible.value = true;
        calculateScrollHeight();
      }, 100);
    }
    let hideTimeout;
    let innerTimeout;
    function hide() {
      if (props.sticky) {
        return;
      }
      hideTimeout = setTimeout(() => {
        cssVisible.value = false;
        innerTimeout = setTimeout(() => {
          domVisible.value = false;
        }, 150);
      }, 100);
    }
    function cancelHide() {
      clearTimeout(hideTimeout);
      clearTimeout(innerTimeout);
    }
    function handleClick() {
      if (domVisible.value) {
        hide();
      } else {
        show();
      }
    }
    onMounted(() => {
      calculateTooltipSize();
    });
    return {
      parentItem,
      width,
      maxHeight,
      absoluteHeight,
      cssVisible,
      domVisible,
      show,
      hide,
      cancelHide,
      handleClick,
      Icons,
      tooltipBody
    };
  }
});
const _hoisted_1$a = {
  key: 0,
  class: "tooltip-header"
};
const _hoisted_2$8 = { class: "tooltip-content" };
function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["passage-tooltip", `${_ctx.position} ${_ctx.cssVisible ? "show-tooltip" : ""}`]),
    ref: "parentItem"
  }, [
    _ctx.active ? withDirectives((openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(["passage-tooltip-body", _ctx.position]),
      style: normalizeStyle(`max-width: ${_ctx.width}px; ${_ctx.maxHeight} ${_ctx.absoluteHeight}`),
      onMouseenter: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.clickMode ? () => {
      } : _ctx.cancelHide(), ["stop"])),
      onMouseleave: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.clickMode ? () => {
      } : _ctx.hide(), ["stop"])),
      ref: "tooltipBody"
    }, [
      _ctx.title || _ctx.clickMode ? (openBlock(), createElementBlock("div", _hoisted_1$a, [
        createBaseVNode("div", null, toDisplayString(_ctx.title), 1),
        _ctx.clickMode ? (openBlock(), createBlock(_component_inline_svg, {
          key: 0,
          src: _ctx.Icons.close,
          style: { "cursor": "pointer" },
          onClick: withModifiers(_ctx.hide, ["stop"])
        }, null, 8, ["src", "onClick"])) : createCommentVNode("", true)
      ])) : createCommentVNode("", true),
      createBaseVNode("div", _hoisted_2$8, [
        renderSlot(_ctx.$slots, "tooltipBody", {}, () => [
          createTextVNode(toDisplayString(_ctx.label), 1)
        ])
      ])
    ], 38)), [
      [vShow, _ctx.domVisible]
    ]) : createCommentVNode("", true),
    createBaseVNode("div", {
      style: { "cursor": "pointer", "user-select": "none" },
      onMouseenter: _cache[2] || (_cache[2] = withModifiers(($event) => _ctx.clickMode ? () => {
      } : _ctx.show(), ["prevent"])),
      onMouseleave: _cache[3] || (_cache[3] = withModifiers(($event) => _ctx.clickMode ? () => {
      } : _ctx.hide(), ["prevent"])),
      onClick: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), ["stop"]))
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 32)
  ], 2);
}
var Tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$7]]);
const _hoisted_1$9 = { style: { "border-top": "1px solid #dddddd", "margin-top": "20px", "padding-top": "15px" } };
const _hoisted_2$7 = { style: { "text-align": "left" } };
const _hoisted_3$4 = { style: { "margin-top": "10px" } };
const _hoisted_4$4 = { class: "flex-row flex-center" };
const _hoisted_5$4 = {
  style: { "opacity": "0.5" },
  class: "link"
};
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  props: {
    appInfo: null
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const allowedIdentifier = computed$1(() => {
      var _a;
      switch ((_a = props.appInfo) == null ? void 0 : _a.allowed_identifier) {
        case bt.phone:
          return t("phone-number");
        case bt.both:
          return t("email-or-phone-number");
        default:
          return t("email-address");
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$9, [
        createVNode(Tooltip, {
          title: unref(t)("where-is-the-password-field"),
          position: unref(TooltipPosition).isTop,
          clickMode: ""
        }, {
          tooltipBody: withCtx(() => {
            var _a, _b;
            return [
              createBaseVNode("div", _hoisted_2$7, [
                createTextVNode(toDisplayString(unref(t)("helper-footer-line-1", [(_b = (_a = __props.appInfo) == null ? void 0 : _a.name) != null ? _b : ""])) + " ", 1),
                createBaseVNode("ul", null, [
                  createBaseVNode("li", null, toDisplayString(unref(t)("helper-footer-bullet-0")), 1),
                  createBaseVNode("li", null, toDisplayString(unref(t)("helper-footer-bullet-1")), 1),
                  createBaseVNode("li", null, toDisplayString(unref(t)("helper-footer-bullet-2", [unref(allowedIdentifier)])), 1)
                ]),
                createBaseVNode("div", _hoisted_3$4, toDisplayString(unref(t)("helper-footer-line-2", [unref(allowedIdentifier)])), 1)
              ])
            ];
          }),
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_4$4, [
              createBaseVNode("span", _hoisted_5$4, toDisplayString(unref(t)("where-is-the-password-field")), 1),
              createVNode(unref(InlineSvg), {
                style: { "margin-left": "10px" },
                src: unref(Icons).help
              }, null, 8, ["src"])
            ])
          ]),
          _: 1
        }, 8, ["title", "position"])
      ]);
    };
  }
});
const _hoisted_1$8 = { class: "view-email-input" };
const _hoisted_2$6 = { class: "auth-flex-container" };
const _hoisted_3$3 = {
  key: 0,
  class: "title main-title has-text-centered"
};
const _hoisted_4$3 = /* @__PURE__ */ createBaseVNode("div", { style: { "height": "20px" } }, null, -1);
const _hoisted_5$3 = {
  key: 3,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
const _hoisted_6$3 = { class: "spacer" };
const _hoisted_7$3 = {
  key: 4,
  class: "link has-text-centered"
};
const _hoisted_8$3 = { key: 0 };
const _hoisted_9$3 = ["onClick"];
const _hoisted_10$2 = { key: 1 };
const _hoisted_11$2 = ["onClick"];
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  props: {
    register: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const showLogin = ref(!props.register);
    const { appInfo, loading, webauthnAllowed, invalidAppId } = useAppInfo();
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    const publicSignup = computed(() => {
      var _a;
      return appInfo.value ? (_a = appInfo.value) == null ? void 0 : _a.public_signup : false;
    });
    function changeInputPage() {
      showLogin.value = !showLogin.value;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$8, [
        createBaseVNode("div", _hoisted_2$6, [
          !unref(loading) ? (openBlock(), createElementBlock("div", _hoisted_3$3, toDisplayString(showLogin.value ? unref(t)("login-title") : unref(t)("register-title")), 1)) : createCommentVNode("", true),
          _hoisted_4$3,
          !unref(loading) ? withDirectives((openBlock(), createBlock(Login, {
            key: 1,
            identifier: identifier.value,
            "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
            canToggleLoginRegister: true,
            countryCode: unref(countryCode),
            "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
            appInfo: unref(appInfo),
            webauthnAllowed: unref(webauthnAllowed),
            visible: showLogin.value
          }, null, 8, ["identifier", "countryCode", "appInfo", "webauthnAllowed", "visible"])), [
            [vShow, showLogin.value]
          ]) : createCommentVNode("", true),
          !unref(loading) ? withDirectives((openBlock(), createBlock(Register, {
            key: 2,
            identifier: identifier.value,
            "onUpdate:identifier": _cache[2] || (_cache[2] = ($event) => identifier.value = $event),
            canToggleLoginRegister: true,
            countryCode: unref(countryCode),
            "onUpdate:countryCode": _cache[3] || (_cache[3] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
            appInfo: unref(appInfo),
            webauthnAllowed: unref(webauthnAllowed)
          }, null, 8, ["identifier", "countryCode", "appInfo", "webauthnAllowed"])), [
            [vShow, !showLogin.value]
          ]) : createCommentVNode("", true),
          unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_5$3, toDisplayString(unref(t)("invalid-app-id")), 1)) : createCommentVNode("", true),
          createBaseVNode("div", _hoisted_6$3, [
            createVNode(EphemeralAppInfo)
          ]),
          !unref(loading) ? (openBlock(), createElementBlock("div", _hoisted_7$3, [
            showLogin.value && unref(publicSignup) ? (openBlock(), createElementBlock("div", _hoisted_8$3, [
              createTextVNode(toDisplayString(unref(t)("dont-have-an-account")) + " ", 1),
              createBaseVNode("a", {
                onClick: withModifiers(changeInputPage, ["prevent"]),
                role: "button",
                "data-test": "register-link"
              }, toDisplayString(unref(t)("register-here")), 9, _hoisted_9$3)
            ])) : !showLogin.value ? (openBlock(), createElementBlock("div", _hoisted_10$2, [
              createTextVNode(toDisplayString(unref(t)("already-have-an-account")) + " ", 1),
              createBaseVNode("a", {
                onClick: withModifiers(changeInputPage, ["prevent"]),
                role: "button",
                "data-test": "login-link"
              }, toDisplayString(unref(t)("login-here")), 9, _hoisted_11$2)
            ])) : createCommentVNode("", true)
          ])) : createCommentVNode("", true),
          !unref(loading) ? (openBlock(), createBlock(_sfc_main$b, {
            key: 5,
            appInfo: unref(appInfo)
          }, null, 8, ["appInfo"])) : createCommentVNode("", true)
        ])
      ]);
    };
  }
});
const _hoisted_1$7 = { class: "view-email-input" };
const _hoisted_2$5 = {
  key: 1,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  setup(__props) {
    const { t } = useLocale();
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    const { appInfo, loading, webauthnAllowed, invalidAppId } = useAppInfo();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$7, [
        !unref(loading) ? (openBlock(), createBlock(Login, {
          key: 0,
          identifier: identifier.value,
          "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
          countryCode: unref(countryCode),
          "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
          canToggleLoginRegister: false,
          appInfo: unref(appInfo),
          webauthnAllowed: unref(webauthnAllowed)
        }, null, 8, ["identifier", "countryCode", "appInfo", "webauthnAllowed"])) : createCommentVNode("", true),
        unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_2$5, toDisplayString(unref(t)("invalid-app-id")), 1)) : createCommentVNode("", true),
        !unref(loading) ? (openBlock(), createBlock(_sfc_main$b, {
          key: 2,
          appInfo: unref(appInfo)
        }, null, 8, ["appInfo"])) : createCommentVNode("", true)
      ]);
    };
  }
});
const _hoisted_1$6 = { class: "view-email-input" };
const _hoisted_2$4 = {
  key: 1,
  class: "notification is-danger has-text-centered",
  "data-test": "invalid-app-id"
};
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  setup(__props) {
    const { t } = useLocale();
    const identifier = ref("");
    const { defaultCountryCode } = useDefaultCountryCode();
    const countryCode = defaultCountryCode;
    const { appInfo, loading, webauthnAllowed, invalidAppId } = useAppInfo();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$6, [
        !unref(loading) ? (openBlock(), createBlock(Register, {
          key: 0,
          identifier: identifier.value,
          "onUpdate:identifier": _cache[0] || (_cache[0] = ($event) => identifier.value = $event),
          countryCode: unref(countryCode),
          "onUpdate:countryCode": _cache[1] || (_cache[1] = ($event) => isRef(countryCode) ? countryCode.value = $event : null),
          canToggleLoginRegister: false,
          appInfo: unref(appInfo),
          webauthnAllowed: unref(webauthnAllowed)
        }, null, 8, ["identifier", "countryCode", "appInfo", "webauthnAllowed"])) : createCommentVNode("", true),
        unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_2$4, toDisplayString(unref(t)("invalid-app-id")), 1)) : createCommentVNode("", true),
        !unref(loading) ? (openBlock(), createBlock(_sfc_main$b, {
          key: 2,
          appInfo: unref(appInfo)
        }, null, 8, ["appInfo"])) : createCommentVNode("", true)
      ]);
    };
  }
});
const _sfc_main$7 = defineComponent({
  name: "Spinner"
});
const _hoisted_1$5 = { class: "spinner-box" };
const _hoisted_2$3 = { class: "spinner-content" };
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$5, [
    createBaseVNode("div", _hoisted_2$3, [
      renderSlot(_ctx.$slots, "default")
    ])
  ]);
}
var Spinner = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6]]);
const _hoisted_1$4 = { class: "auth-flex-container" };
const _hoisted_2$2 = { class: "title has-text-centered" };
const _hoisted_3$2 = {
  key: 0,
  class: "content has-text-centered",
  style: { "margin-bottom": "15px !important" }
};
const _hoisted_4$2 = ["innerHTML"];
const _hoisted_5$2 = { class: "flex-row flex-center" };
const _hoisted_6$2 = ["onClick", "disabled"];
const _hoisted_7$2 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_8$2 = { class: "link has-text-centered" };
const _hoisted_9$2 = ["onClick"];
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  props: {
    identifier: null,
    userIsRegistering: { type: Boolean },
    identifierVerifying: { type: Boolean },
    setupNewDevice: { type: Boolean },
    identifierType: null
  },
  setup(__props) {
    const props = __props;
    const { t, locale } = useLocale();
    const { appId } = useAppId();
    const passage = new Qe(appId.value);
    const { router: router2 } = useRouter();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const title = computed(() => {
      if (props.identifierVerifying) {
        if (isEmail.value) {
          if (props.userIsRegistering) {
            return t("verify-email-to-register");
          } else {
            return t("verify-email-to-login");
          }
        } else {
          if (props.userIsRegistering) {
            return t("verify-phone-to-register");
          } else {
            return t("verify-phone-to-login");
          }
        }
      } else {
        if (isEmail.value) {
          if (props.userIsRegistering) {
            return t("check-email-to-register");
          } else {
            return t("check-email-to-login");
          }
        } else {
          if (props.userIsRegistering) {
            return t("check-phone-to-register");
          } else {
            return t("check-phone-to-login");
          }
        }
      }
    });
    const message = computed(() => {
      let messageValue = "";
      const messageType = props.identifierType === IdentifierType.email ? t("messagetype-email") : t("messagetype-sms");
      const messageMedium = props.identifierType === IdentifierType.email ? t("email") : t("phone-number");
      const registrationType = props.userIsRegistering ? t("registration") : t("login");
      const loginMessage = props.identifierVerifying ? t("please-verify-identifier", [messageMedium, registrationType]) : t("you-will-be-automatically-signed-in");
      messageValue = t("weve-sent-messagetype", [messageType, props.identifier, loginMessage]);
      if (props.setupNewDevice && !props.userIsRegistering) {
        messageValue = t("we-dont-recognize-this-device") + " " + messageValue;
      }
      return messageValue;
    });
    onMounted(() => {
      if (props.userIsRegistering) {
        magicLinkSendRegister();
      } else {
        magicLinkSendLogin();
      }
    });
    function changeEmail() {
      localStorage.removeItem("email");
      localStorage.removeItem("magic_link_id");
      localStorage.removeItem("wait_count");
      waitForActivatedMagicLink(721);
      router2.push(router2.homeRoute);
    }
    function resendMagicLink() {
      return __async(this, null, function* () {
        yield magicLinkSendLogin();
      });
    }
    const showWaiting = ref(false);
    const loading = ref(true);
    function magicLinkSendRegister() {
      return __async(this, null, function* () {
        showWaiting.value = false;
        loading.value = true;
        yield new Promise((resolve) => {
          setTimeout(resolve, 2e3);
        });
        try {
          const res = yield passage.newRegisterMagicLink(props.identifier, locale.value.split("-")[0]);
          if (res.id != "") {
            localStorage.setItem("magic_link_id", res.id);
            waitForActivatedMagicLink(0);
          }
        } catch (err) {
          console.log("magicLinkSend error", err);
        } finally {
          loading.value = false;
        }
      });
    }
    function magicLinkSendLogin() {
      return __async(this, null, function* () {
        showWaiting.value = false;
        loading.value = true;
        try {
          const res = yield passage.newLoginMagicLink(props.identifier, locale.value.split("-")[0]);
          if (res.id != "") {
            localStorage.setItem("magic_link_id", res.id);
            waitForActivatedMagicLink(0);
          }
        } catch (err) {
          console.log("magicLinkSend error", err);
        } finally {
          yield new Promise((resolve) => {
            setTimeout(resolve, 3e3);
          });
          loading.value = false;
        }
      });
    }
    let authResult = void 0;
    function lookupMagicLink() {
      return __async(this, null, function* () {
        const id = localStorage.getItem("magic_link_id");
        yield lookupMagicLinkActivated(id).then(() => __async(this, null, function* () {
          if (authResult && authResult.redirect_url != "") {
            localStorage.removeItem("magic_link_id");
            localStorage.removeItem("wait_count");
            yield storeLastLogin();
            useCallbacks().onEvent.value(OnEventType.onMagicLinkActivated);
            useCallbacks().onSuccess.value(authResult);
          }
        }));
      });
    }
    function lookupMagicLinkActivated(id) {
      return __async(this, null, function* () {
        yield passage.getMagicLinkStatus(id).then((res) => {
          waitForActivatedMagicLink(721);
          authResult = res;
        }).catch(() => {
        });
        return;
      });
    }
    let timer;
    function waitForActivatedMagicLink(count) {
      let i = count;
      if (i < 720) {
        showWaiting.value = true;
        timer = setTimeout(() => __async(this, null, function* () {
          delay(i);
          i++;
          waitForActivatedMagicLink(i);
        }), 5e3);
      } else {
        clearTimeout(timer);
        showWaiting.value = false;
        return;
      }
    }
    function delay(i) {
      lookupMagicLink();
      localStorage.setItem("wait_count", i.toString());
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$4, [
        createBaseVNode("div", _hoisted_2$2, [
          createBaseVNode("span", null, toDisplayString(unref(title)), 1)
        ]),
        createVNode(Spinner, null, {
          default: withCtx(() => [
            unref(isEmail) ? (openBlock(), createBlock(unref(InlineSvg), {
              key: 0,
              src: unref(Icons).email,
              alt: "Email envelope"
            }, null, 8, ["src"])) : (openBlock(), createBlock(unref(InlineSvg), {
              key: 1,
              src: unref(Icons).phone,
              alt: "Message bubbles"
            }, null, 8, ["src"]))
          ]),
          _: 1
        }),
        unref(message) ? (openBlock(), createElementBlock("div", _hoisted_3$2, [
          createBaseVNode("span", { innerHTML: unref(message) }, null, 8, _hoisted_4$2)
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_5$2, [
          createBaseVNode("button", {
            onClick: withModifiers(resendMagicLink, ["prevent"]),
            type: "button",
            class: "button is-primary",
            part: "button",
            disabled: loading.value
          }, toDisplayString(unref(t)("resend-isemail-email-message", [unref(isEmail) ? unref(t)("email") : unref(t)("message")])), 9, _hoisted_6$2)
        ]),
        _hoisted_7$2,
        createBaseVNode("div", _hoisted_8$2, [
          createBaseVNode("a", {
            onClick: withModifiers(changeEmail, ["prevent"]),
            role: "button",
            "data-test": "change-email-button"
          }, toDisplayString(unref(t)("change-isemail-email-phone", [unref(isEmail) ? unref(t)("email") : unref(t)("phone")])), 9, _hoisted_9$2)
        ])
      ]);
    };
  }
});
const _sfc_main$5 = defineComponent({
  name: "MagicLinkView",
  props: {
    identifier: {
      type: String,
      required: true
    },
    userIsRegistering: {
      type: Boolean,
      default: false
    },
    identifierVerifying: {
      type: Boolean,
      default: false
    },
    setupNewDevice: {
      type: Boolean,
      default: false
    },
    identifierType: {
      type: String,
      required: true
    }
  },
  components: {
    MagicLink: _sfc_main$6
  }
});
const _hoisted_1$3 = { class: "view-access-token" };
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_magic_link = resolveComponent("magic-link");
  return openBlock(), createElementBlock("div", _hoisted_1$3, [
    createVNode(_component_magic_link, {
      identifier: _ctx.identifier,
      userIsRegistering: _ctx.userIsRegistering,
      identifierVerifying: _ctx.identifierVerifying,
      setupNewDevice: _ctx.setupNewDevice,
      identifierType: _ctx.identifierType
    }, null, 8, ["identifier", "userIsRegistering", "identifierVerifying", "setupNewDevice", "identifierType"])
  ]);
}
var MagicLinkView = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$5]]);
const _sfc_main$4 = defineComponent({
  name: "RegisterDevice",
  components: {
    InlineSvg,
    PlatformIcon: _sfc_main$k
  },
  props: {
    identifier: {
      type: String,
      required: true
    },
    identifierType: {
      type: String,
      required: true
    }
  },
  setup(props) {
    const { t } = useLocale();
    const { appId } = useAppId();
    const { router: router2 } = useRouter();
    const { onSuccess: onSuccess2 } = useCallbacks();
    const showFailure = ref(false);
    const { autofocusButton } = useAutofocusButton();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const title = computed(() => {
      if (showFailure.value) {
        return t("register-with-link", [isEmail.value ? t("email") : t("sms-text")]);
      }
      return t("register-without-a-password");
    });
    return {
      appId,
      router: router2,
      onSuccess: onSuccess2,
      isEmail,
      showFailure,
      title,
      Icons,
      t,
      autofocusButton
    };
  },
  data: () => {
    return {
      loading: false,
      authResult: null,
      passage: null
    };
  },
  created: function() {
    this.passage = new Qe(this.appId);
  },
  methods: {
    signUpWebAuthn(identifier) {
      return __async(this, null, function* () {
        this.loading = true;
        this.showFailure = false;
        this.authResult = { auth_token: "", redirect_url: "" };
        try {
          const res = yield this.passage.register(identifier);
          this.authResult = res;
          this.loading = false;
          if (this.authResult.redirect_url) {
            storeLastLogin(identifier);
            this.onSuccess(this.authResult);
          }
        } catch (err) {
          this.showFailure = true;
          this.loading = false;
        }
      });
    },
    registerWithEmail() {
      if (this.showFailure) {
        this.router.push(MagicLinkRoute, {
          identifier: this.identifier,
          identifierType: this.identifierType,
          userIsRegistering: false
        });
      } else {
        this.router.push(MagicLinkRoute, {
          identifier: this.identifier,
          identifierType: this.identifierType,
          userIsRegistering: true
        });
      }
    },
    changeEmail() {
      localStorage.removeItem("email");
      this.router.push(this.router.homeRoute, { register: true });
    },
    redirectNow() {
      if (this.authResult.redirect_url) {
        storeLastLogin(this.identifier);
        this.onSuccess(this.authResult);
      }
    },
    onButtonClick() {
      this.signUpWebAuthn(this.identifier);
    }
  }
});
const _hoisted_1$2 = { class: "auth-flex-container" };
const _hoisted_2$1 = { class: "title secondary-title has-text-centered" };
const _hoisted_3$1 = { class: "image has-text-centered" };
const _hoisted_4$1 = {
  class: "content wrap-text has-text-centered",
  style: { "margin-bottom": "10px !important" },
  "data-tag": "register-device-message"
};
const _hoisted_5$1 = {
  key: 0,
  style: { "margin-bottom": "5px" }
};
const _hoisted_6$1 = { key: 1 };
const _hoisted_7$1 = { key: 2 };
const _hoisted_8$1 = { style: { "margin-bottom": "10px" } };
const _hoisted_9$1 = {
  key: 0,
  class: "flex-row flex-center"
};
const _hoisted_10$1 = ["disabled"];
const _hoisted_11$1 = ["disabled"];
const _hoisted_12$1 = {
  key: 1,
  class: "flex-row flex-center"
};
const _hoisted_13$1 = ["disabled"];
const _hoisted_14$1 = {
  key: 2,
  class: "content has-text-centered",
  style: { "margin-top": "20px !important" }
};
const _hoisted_15$1 = { class: "link" };
const _hoisted_16$1 = {
  key: 3,
  class: "spacer"
};
const _hoisted_17$1 = {
  key: 4,
  class: "flex-row flex-wrap flex-between"
};
const _hoisted_18 = { class: "link" };
const _hoisted_19 = { class: "link" };
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  const _component_platform_icon = resolveComponent("platform-icon");
  return openBlock(), createElementBlock("div", _hoisted_1$2, [
    createBaseVNode("div", _hoisted_2$1, toDisplayString(_ctx.title), 1),
    createBaseVNode("figure", _hoisted_3$1, [
      _ctx.showFailure && _ctx.isEmail ? (openBlock(), createBlock(_component_inline_svg, {
        key: 0,
        src: _ctx.Icons.loginWithEmail,
        alt: "Biometrics scan failed",
        style: { "margin": "5px" }
      }, null, 8, ["src"])) : _ctx.showFailure && !_ctx.isEmail ? (openBlock(), createBlock(_component_inline_svg, {
        key: 1,
        src: _ctx.Icons.loginWithText,
        alt: "Biometrics scan failed",
        style: { "margin": "5px" }
      }, null, 8, ["src"])) : (openBlock(), createBlock(_component_platform_icon, { key: 2 }))
    ]),
    createBaseVNode("div", _hoisted_4$1, [
      _ctx.identifier ? (openBlock(), createElementBlock("div", _hoisted_5$1, [
        createBaseVNode("strong", null, toDisplayString(_ctx.identifier), 1)
      ])) : createCommentVNode("", true),
      _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_6$1, [
        createBaseVNode("p", null, toDisplayString(_ctx.isEmail ? _ctx.t("registration-with-link-error-message-email") : _ctx.t("registration-with-link-error-message-phone")), 1)
      ])) : (openBlock(), createElementBlock("div", _hoisted_7$1, [
        createBaseVNode("div", _hoisted_8$1, toDisplayString(_ctx.t("register-your-account")), 1),
        createBaseVNode("div", null, toDisplayString(_ctx.t("does-not-give-app-personal-info")), 1)
      ]))
    ]),
    _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_9$1, [
      createBaseVNode("button", {
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.registerWithEmail && _ctx.registerWithEmail(...args), ["prevent"])),
        type: "button",
        part: "button",
        class: "button is-primary small",
        disabled: _ctx.loading,
        style: { "margin-right": "5px" },
        "data-test": "login-with-email-button",
        ref: "autofocusButton"
      }, toDisplayString(_ctx.t("send-email-or-text-link", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("sms-text")])), 9, _hoisted_10$1),
      createBaseVNode("button", {
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.onButtonClick && _ctx.onButtonClick(...args), ["prevent"])),
        type: "button",
        part: "button",
        class: "button is-secondary small",
        disabled: _ctx.loading,
        style: { "margin-left": "5px" }
      }, toDisplayString(_ctx.t("try-again")), 9, _hoisted_11$1)
    ])) : (openBlock(), createElementBlock("div", _hoisted_12$1, [
      createBaseVNode("button", {
        onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.onButtonClick && _ctx.onButtonClick(...args), ["prevent"])),
        type: "button",
        class: normalizeClass(["button", [{ "is-loading": _ctx.loading }]]),
        part: "button",
        disabled: _ctx.loading,
        "data-test": "register-main-button",
        tabindex: "0",
        ref: "autofocusButton"
      }, [
        createBaseVNode("span", null, toDisplayString(_ctx.t("register-with-device")), 1)
      ], 10, _hoisted_13$1)
    ])),
    _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_14$1, [
      createBaseVNode("div", _hoisted_15$1, [
        createBaseVNode("a", {
          onClick: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.changeEmail && _ctx.changeEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "change-email-button"
        }, toDisplayString(_ctx.t("change-isemail-email-phone", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("phone")])), 1)
      ])
    ])) : createCommentVNode("", true),
    !_ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_16$1)) : createCommentVNode("", true),
    !_ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_17$1, [
      createBaseVNode("div", _hoisted_18, [
        createBaseVNode("a", {
          onClick: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.changeEmail && _ctx.changeEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "change-email-button"
        }, toDisplayString(_ctx.t("change-isemail-email-phone", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("phone")])), 1)
      ]),
      createBaseVNode("div", _hoisted_19, [
        createBaseVNode("a", {
          onClick: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.registerWithEmail && _ctx.registerWithEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "register-email-button"
        }, toDisplayString(_ctx.t("register-with-link", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("sms-text")])), 1)
      ])
    ])) : createCommentVNode("", true)
  ]);
}
var RegisterDevice = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$4]]);
const _sfc_main$3 = defineComponent({
  name: "RegisterDeviceView",
  props: {
    identifier: {
      type: String,
      required: true
    },
    identifierType: {
      type: String,
      required: true
    }
  },
  components: {
    RegisterDevice
  }
});
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_register_device = resolveComponent("register-device");
  return openBlock(), createBlock(_component_register_device, {
    identifier: _ctx.identifier,
    identifierType: _ctx.identifierType
  }, null, 8, ["identifier", "identifierType"]);
}
var RegisterDeviceView = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$3]]);
const _sfc_main$2 = defineComponent({
  name: "WebauthnSignIn",
  components: {
    InlineSvg,
    PlatformIcon: _sfc_main$k
  },
  props: {
    identifier: {
      type: String,
      required: true
    },
    identifierType: {
      type: String,
      required: true
    }
  },
  setup(props) {
    const { t } = useLocale();
    const { appId } = useAppId();
    const { router: router2 } = useRouter();
    const isEmail = computed(() => {
      return props.identifierType === IdentifierType.email;
    });
    const { autofocusButton } = useAutofocusButton();
    return {
      appId,
      router: router2,
      isEmail,
      Icons,
      t,
      autofocusButton
    };
  },
  data: () => {
    return {
      showFailure: false,
      loading: false,
      passage: null,
      authResult: null
    };
  },
  created: function() {
    this.passage = new Qe(this.appId);
  },
  mounted() {
    this.signInWebAuthn();
  },
  methods: {
    signInWebAuthn() {
      return __async(this, null, function* () {
        this.authResult = { auth_token: "", redirect_url: "" };
        this.showFailure = false;
        if (!this.identifier) {
          return;
        }
        this.loading = true;
        try {
          const res = yield this.passage.login(this.identifier);
          this.authResult = res;
          if (this.authResult.redirect_url) {
            storeLastLogin(this.identifier);
            useCallbacks().onSuccess.value(this.authResult);
          }
          this.loading = false;
        } catch (err) {
          const error = err;
          this.showFailure = true;
          this.loading = false;
          if (error.statusCode === M.PSGParsePublicKeyForLoginFailed) {
            this.showFailure = true;
          } else {
            this.router.push(MagicLinkRoute, { identifier: this.identifier, identifierType: this.identifierType });
          }
        }
      });
    },
    loginWithEmail() {
      this.router.push(MagicLinkRoute, { identifier: this.identifier, identifierType: this.identifierType });
    },
    changeEmail() {
      localStorage.removeItem("email");
      this.router.push(this.router.homeRoute);
    }
  }
});
const _hoisted_1$1 = { class: "auth-flex-container" };
const _hoisted_2 = { class: "title has-text-centered" };
const _hoisted_3 = {
  class: "image has-text-centered",
  style: { "margin": "5px auto" }
};
const _hoisted_4 = {
  key: 0,
  class: "content wrap-text has-text-centered",
  style: { "margin-bottom": "25px !important" }
};
const _hoisted_5 = {
  key: 0,
  style: { "margin-bottom": "5px" }
};
const _hoisted_6 = {
  key: 1,
  class: "content wrap-text has-text-centered",
  style: { "margin-bottom": "5px !important" }
};
const _hoisted_7 = {
  key: 0,
  style: { "margin-bottom": "5px" }
};
const _hoisted_8 = { "data-test": "failure-message" };
const _hoisted_9 = {
  key: 2,
  class: "flex-row flex-center"
};
const _hoisted_10 = ["disabled"];
const _hoisted_11 = ["disabled"];
const _hoisted_12 = {
  key: 3,
  class: "content has-text-centered",
  style: { "margin-top": "20px !important" }
};
const _hoisted_13 = { class: "link" };
const _hoisted_14 = {
  key: 4,
  class: "spacer"
};
const _hoisted_15 = {
  key: 5,
  class: "flex-row flex-wrap flex-between"
};
const _hoisted_16 = { class: "link" };
const _hoisted_17 = { class: "link" };
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_inline_svg = resolveComponent("inline-svg");
  const _component_platform_icon = resolveComponent("platform-icon");
  return openBlock(), createElementBlock("div", _hoisted_1$1, [
    createBaseVNode("div", _hoisted_2, toDisplayString(_ctx.showFailure ? _ctx.t("login-with-link", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("sms-text")]) : _ctx.t("verify-your-identity")), 1),
    createBaseVNode("figure", _hoisted_3, [
      _ctx.showFailure && _ctx.isEmail ? (openBlock(), createBlock(_component_inline_svg, {
        key: 0,
        src: _ctx.Icons.loginWithEmail,
        alt: "Biometrics scan failed",
        style: { "margin": "5px" }
      }, null, 8, ["src"])) : _ctx.showFailure && !_ctx.isEmail ? (openBlock(), createBlock(_component_inline_svg, {
        key: 1,
        src: _ctx.Icons.loginWithText,
        alt: "Biometrics scan failed",
        style: { "margin": "5px" }
      }, null, 8, ["src"])) : (openBlock(), createBlock(_component_platform_icon, { key: 2 }))
    ]),
    !_ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_4, [
      _ctx.identifier ? (openBlock(), createElementBlock("div", _hoisted_5, [
        createBaseVNode("strong", null, toDisplayString(_ctx.identifier), 1)
      ])) : createCommentVNode("", true),
      createBaseVNode("div", null, toDisplayString(_ctx.t("log-into-your-account")), 1)
    ])) : _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_6, [
      _ctx.identifier ? (openBlock(), createElementBlock("div", _hoisted_7, [
        createBaseVNode("strong", null, toDisplayString(_ctx.identifier), 1)
      ])) : createCommentVNode("", true),
      createBaseVNode("div", _hoisted_8, [
        createBaseVNode("p", null, toDisplayString(_ctx.isEmail ? _ctx.t("login-with-link-error-message-email") : _ctx.t("login-with-link-error-message-phone")), 1)
      ])
    ])) : createCommentVNode("", true),
    _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_9, [
      createBaseVNode("button", {
        onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.loginWithEmail && _ctx.loginWithEmail(...args), ["prevent"])),
        type: "button",
        part: "button",
        class: "button is-primary small",
        disabled: _ctx.loading,
        style: { "margin-right": "5px" },
        "data-test": "login-with-email-button",
        ref: "autofocusButton"
      }, toDisplayString(_ctx.t("send-email-or-text-link", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("sms-text")])), 9, _hoisted_10),
      createBaseVNode("button", {
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.signInWebAuthn && _ctx.signInWebAuthn(...args), ["prevent"])),
        type: "button",
        part: "button",
        class: "button is-secondary small",
        disabled: _ctx.loading,
        style: { "margin-left": "5px" }
      }, toDisplayString(_ctx.t("try-again")), 9, _hoisted_11)
    ])) : createCommentVNode("", true),
    _ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_12, [
      createBaseVNode("div", _hoisted_13, [
        createBaseVNode("a", {
          onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.changeEmail && _ctx.changeEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "change-email-button"
        }, toDisplayString(_ctx.t("change-isemail-email-phone", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("phone")])), 1)
      ])
    ])) : createCommentVNode("", true),
    !_ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_14)) : createCommentVNode("", true),
    !_ctx.showFailure ? (openBlock(), createElementBlock("div", _hoisted_15, [
      createBaseVNode("div", _hoisted_16, [
        createBaseVNode("a", {
          onClick: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.changeEmail && _ctx.changeEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "change-email-button"
        }, toDisplayString(_ctx.t("change-isemail-email-phone", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("phone")])), 1)
      ]),
      createBaseVNode("div", _hoisted_17, [
        createBaseVNode("a", {
          onClick: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.loginWithEmail && _ctx.loginWithEmail(...args), ["prevent"])),
          role: "button",
          "data-test": "register-email-button"
        }, toDisplayString(_ctx.t("login-with-link", [_ctx.isEmail ? _ctx.t("email") : _ctx.t("sms-text")])), 1)
      ])
    ])) : createCommentVNode("", true)
  ]);
}
var WebauthnSignIn = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
const _sfc_main$1 = defineComponent({
  name: "WebauthnSignInView",
  props: {
    identifier: {
      type: String,
      required: true
    },
    identifierType: {
      type: String,
      required: true
    }
  },
  components: {
    WebauthnSignIn
  }
});
const _hoisted_1 = { class: "view-webauthn-sign-in" };
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_webauthn_sign_in = resolveComponent("webauthn-sign-in");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_webauthn_sign_in, {
      identifier: _ctx.identifier,
      identifierType: _ctx.identifierType
    }, null, 8, ["identifier", "identifierType"])
  ]);
}
var WebauthnSignInView = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
const _sfc_main = defineComponent({
  name: "RouterView",
  components: {
    ActivateMagicLinkView,
    AuthView: _sfc_main$a,
    LoginView: _sfc_main$9,
    RegisterView: _sfc_main$8,
    MagicLinkView,
    RegisterDeviceView,
    WebauthnSignInView
  },
  setup() {
    const { currentRoute: currentRoute2 } = useRouter();
    const currentComponent = computed(() => currentRoute2.value.component);
    const currentProps = computed(() => {
      const props = currentRoute2.value.props;
      if (props === void 0) {
        return {};
      }
      return props;
    });
    return {
      currentComponent,
      currentProps
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.currentComponent), normalizeProps(guardReactiveProps(_ctx.currentProps)), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16);
}
var PassageRouterView = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { LoginRoute as L, PassageRouterView as P, RegisterRoute as R, useRouter as a, useCallbacks as u };
//# sourceMappingURL=customElements.es2.js.map
